mixin coverage-tile(skill, icon)
  .w-full.p-3(class='md:w-1/2 xl:w-1/3')
    .bg-white.border.rounded.shadow.p-2
      .flex.flex-row.items-center
        .flex-shrink.pr-4.border-r.border-gray-200
          .rounded
            i.colored.fa-5x(class=icon)
        .flex-1.pl-4
          h3.text-3xl(id=skill + '-coverage')

mixin x-data-manage
  script.
    function manage() {
      return {
        users: [],
        skills: [],
        selectedUser: '',
        selectedSkill: '',
        skillLevel: '',
        async fetchUsers() {
          return await _api.fetchUsers()
        },
        async fetchUserById(id) {
          return await _api.fetchUser(id)
        },
        async fetchSkills() {
          return await _api.fetchSkills()
        },
        async fetchSkillById(id) {
          return await _api.fetchSkill(id)
        },
        refreshDashboard() {
          return this.fetchUsers().then(users => {
            this.users = users // select option template x-for values
            this.fetchSkills().then(skills => {
              this.skills = skills // select option template x-for values
              skills.forEach(skill => this.calculateSkillCoverage(users, skill))
            })
            .catch(err => {
              console.log(err)
              _notify.send('error', 'Unable to fetch data')
            })
          })
        },
        calculateSkillCoverage(users, skill) {
          let stat = _calculate.overallCoverageForSkill(users, skill)
          
          if (stat) {
            let el = document.getElementById(stat.skill + '-coverage')

            if (el) {
              el.innerText = `%${stat.coveragePercent}`
            
              let span = document.createElement('span')
              span.classList = "ml-2 text-sm text-gray-400 inline-block align-middle"
              span.innerText = `(${stat.numPeopleRequiredToAchieveCoverage} more people required).`
              
              el.appendChild(span)
            }
          }
        },
        getSkillLevelForSelectedUserAndSkill() {
          _api.fetchUser(this.selectedUser)
          .then(user => {
            let skill = user.skills.find(s => s.id === parseInt(this.selectedSkill))
            if (skill) this.skillLevel = skill.user_skill.level
          })
          .catch(err => {
            console.log(err)
            _notify.send("Unable to get skill level, an unexpected error occurred.")
          })
        },
        setUserSkillLevel() {
          _api.fetchUser(this.selectedUser)
          .then(user => {
            _api.fetchSkill(this.selectedSkill).then(skill => {
              _api.setUserSkillLevel(user, skill, parseInt(this.skillLevel)).then(result => {
                _notify.send('success', result.message)
                this.refreshDashboard()
              })
            })
          })
          .catch(err => {
            console.log(err)
            _notify.send("Unable to set skill level, an unexpected error occurred.")
          })
        },
        updateUserSkillLevel() {
          _api.fetchUser(this.selectedUser)
          .then(user => {
            _api.fetchSkill(this.selectedSkill).then(skill => {
              _api.updateUserSkillLevel(user, skill, parseInt(this.skillLevel)).then(result => {
                _notify.send('success', result.message)
                this.refreshDashboard()
              })
            })
          })
          .catch(err => {
            console.log(err)
            _notify.send("Unable to update skill level, an unexpected error occurred.")
          })
        }
      }
    }

    // TODO update to alpine
    const userMenuDiv = document.getElementById("userMenu");
    const userMenu = document.getElementById("userButton");
    const navMenuDiv = document.getElementById("nav-content");
    const navMenu = document.getElementById("nav-toggle");

    document.onclick = check;

    function check(e) {
      let target = (e && e.target) || (event && event.srcElement);
      if (!checkParent(target, userMenuDiv)) {
        if (checkParent(target, userMenu)) {
          if (userMenuDiv.classList.contains("invisible")) {
            userMenuDiv.classList.remove("invisible");
          } else { userMenuDiv.classList.add("invisible"); }
        } else {
          userMenuDiv.classList.add("invisible");
        }
      }

      if (!checkParent(target, navMenuDiv)) {
        if (checkParent(target, navMenu)) {
          if (navMenuDiv.classList.contains("hidden")) {
            navMenuDiv.classList.remove("hidden");
          } else { navMenuDiv.classList.add("hidden"); }
        } else {
          navMenuDiv.classList.add("hidden");
        }
      } 
    }

    function checkParent(t, elm) {
      while (t.parentNode) {
        if (t == elm) { return true; }
        t = t.parentNode;
      }
      return false;
    }